<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_2cb_tlm_gg">
 <title>Groups</title>
 <shortdesc>Grouping in phonex 2.0.</shortdesc>
 <conbody>
  <p>Groups can be <i>capturing</i> or <i>non-capturing</i>.  <i>Capturing</i> groups are numbered
   by counting the open parenthesis from left to right in the expression.  <i>Non-capturing</i>
   groups do not count towards the group total.  For example, in the expression
    <codeph>(h({v}))(?={c}+({-c}))</codeph> there are three groups:<ol id="ol_gph_qcm_gg">
    <li><codeph>(h({v}))</codeph></li>
    <li><codeph>({v})</codeph></li>
    <li><codeph>({-c})</codeph></li>
   </ol>Group zero is always the entire expression.</p>
  <p>Back-references can be used to match content previously matched by the expression.  A common
   example is to search for a repeated consonant (e.g., <codeph>({c})\1</codeph>) or syllable (e.g.,
    <codeph>({c}{v})\1</codeph>.)  Content matched by a back-reference will <i>not</i> check
   syllable constituent type or stress, however plug-in matchers can be added to the back-reference
   like any other phone matcher.</p>
  <p>Quantifiers can be applied to groups, and also affect the value stored in a group after
   matching.  The following examples illustrate this.</p>
  <example>
   <table frame="all" id="table_gyn_hc4_gg">
    <title>Grouping Examples</title>
    <tgroup cols="3">
     <colspec colname="c1" colnum="1" colwidth="2.62*"/>
     <colspec colname="c2" colnum="2" colwidth="1*"/>
     <colspec colname="newCol3" colnum="3" colwidth="3.54*"/>
     <thead>
      <row>
       <entry>Expression</entry>
       <entry>Input</entry>
       <entry>Group Values after Match</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><codeph>(\s?{c}{v})+</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 1 = ni</entry>
      </row>
      <row>
       <entry><codeph>((\s?{c}{v})+)</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 1 = zu'ki:ni, group 2 = ni</entry>
      </row>
      <row>
       <entry><codeph>((lastsyll=\s?{c}{v})+)</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 1 = zu'ki:ni, group 'lastsyll' = ni</entry>
      </row>
      <row>
       <entry><codeph>(?=(lastsyll=\s?{c}{v})+)</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 'lastsyll' = ni</entry>
      </row>
      <row>
       <entry><codeph>(cv1=\s?{c}{v})(cv2=\s?{c}{v})(cv3=\s?{c}{v})</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 'cv1' = zu, group 'cv2' = 'ki:, group 'cv3' = ni</entry>
      </row>
      <row>
       <entry><codeph>(cv1=\s?{c}{v})(rem=(?=\s?{c}{v})&lt;2>)</codeph></entry>
       <entry>zu'ki:ni</entry>
       <entry>group 'cv1' = zu, group 'rem' = 'ki:ni</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </example>
 </conbody>
</concept>
